{"name":"Brown","tagline":"hyperfast and minimalistic json2html template engine for nodejs / coffeescript, a mashup between emmet/mustache/json-dsl/smarty","body":"<h1>ϐrown</h1>\r\n\r\nJSON 2 html/xml template engine on steroids\r\n\r\n# Usage \r\n\r\n    $ npm install brown\r\n\r\nthen \r\n\r\n    brown = require 'brown'\r\n\r\n    json = \r\n      'div#foo.flop>fieldset>div>span': \r\n        ul: 'items->li>a[href=\"{{.url}}\"]>{ {{.label}} }'\r\n      div: \r\n        'span>b.foo': '{{foo}}'\r\n        'span>b.bar': '{{func()}}'\r\n        'span>b.pip': '{{foo|upper|important}}'\r\n\r\n    data = \r\n      items: [{label:'one', url:\"/\"},{label:'two',url:'/two'}]\r\n      foo: \"hello world\"\r\n      func: () -> @.foo + \" foobar\"\r\n      upper: (str) -> str.toUpperCase()\r\n      important: (str) -> \"!! \"+str\r\n    \r\n    brown json, data\r\n\r\n> NOTE: instead of coffeescript, see the javascript example [here](https://github.com/coderofsalvation/brown/blob/master/test/test.js)\r\n\r\noutput:\r\n\r\n    <div id=\"foo\" class=\"flop\">\r\n      <fieldset>\r\n        <div>\r\n          <span>\r\n            <ul>\r\n              <li>\r\n                <a href=\"/\"> one </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"/two\"> two </a>\r\n              </li>\r\n            </ul>\r\n          </span>\r\n        </div>\r\n      </fieldset>\r\n    </div>\r\n    <div>\r\n      <span>\r\n        <b class=\"foo\">hello world</b>\r\n      </span>\r\n      <span>\r\n        <b class=\"bar\">hello world foobar</b>\r\n      </span>\r\n      <span>\r\n        <b class=\"pipe\">!! HELLO WORLD</b>\r\n      </span>\r\n    </div>\r\n\r\n# Philosophy\r\n\r\nϐrown wants to be very fast an minimal, therefore uses [json-dsl](https://npmjs.com/packages/json-dsl).\r\nϐrown combines ideas from smarty, mustache and emmet/zencoding.\r\nϐrown focuses on json and json-portability instead of text (smarty/mustache) or introducing a new syntax which require lexicalscanner/parsertree-bloat (jade,coffeecup,haml etc).\r\n\r\n# Features\r\n\r\n* variable substitution using {{variablename}}\r\n* filter chaining using '|'\r\n* functions using {{functionname()}}\r\n* iteration over objects using '->' and {{.keyname}} \r\n* iteration over arrays using '->' and {{.}}\r\n\r\nWith these basics you can literally do anything. \r\nNeed more? just use functions and filters. \r\n\r\n# nested templates\r\n\r\nWant master templates?\r\nEasy, you can call brown inside brown.\r\n\r\n    data = \r\n      master:\r\n        html: \r\n          head: ''\r\n          body:\r\n            'div#main': '{{content()}}'\r\n      page:\r\n        'ul#menu':\r\n          div: \"{{foo}}\"\r\n      data:\r\n        foo: \"hello world\"\r\n      content: () -> brown @.page, @.data\r\n\r\n    brown data.master, data\r\n\r\n> NOTE: instead of coffeescript, see the javascript example [here](https://github.com/coderofsalvation/brown/blob/master/test/mastertemplate.js)\r\n\r\noutput:    \r\n\r\n    <html><head></head><body><div id=\"main\"><ul id=\"menu\"><div>hello world</div></ul></div></body></html></body></head></html>    \r\n\r\n# traversing arrays/objects\r\n\r\nArrays here you go\r\n\r\n      'div':\r\n        ul: 'arr->li>{ {{.}} }'\r\n        ol: 'arr->{{.|upper}}'\r\n\r\nAnd for objects just reference the keys like so: `{{.keyname}}`\r\n\r\nFor more info see the info above or the [tests](https://github.com/coderofsalvation/brown/blob/master/test/test.js)\r\n\r\n# Browser usage \r\n\r\n    <script type='text/javascript' src='brown.min.js'></script>\r\n    <script>\r\n      brown = require('brown');\r\n      html = brown.parse( {\"div\":\"{{foo}}\"}, {foo:\"bar\"} )\r\n      alert(html);\r\n    </script>\r\n\r\n# Roadmap\r\n\r\n* global functions and filters\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}